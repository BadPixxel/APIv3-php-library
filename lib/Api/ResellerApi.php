<?php
/**
 * ResellerApi
 * PHP version 5
 *
 * @category Class
 * @package  Sendinblue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sendinblue\Client\Api;

use \Sendinblue\Client\ApiClient;
use \Sendinblue\Client\ApiException;
use \Sendinblue\Client\Configuration;
use \Sendinblue\Client\ObjectSerializer;

/**
 * ResellerApi Class Doc Comment
 *
 * @category Class
 * @package  Sendinblue\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResellerApi
{
    /**
     * API Client
     *
     * @var \Sendinblue\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Sendinblue\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Sendinblue\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Sendinblue\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Sendinblue\Client\ApiClient $apiClient set the API client
     *
     * @return ResellerApi
     */
    public function setApiClient(\Sendinblue\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addCredits
     *
     * Add Email and/or SMS credits to a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\AddCredits $addCredits Values to post to add credit to a specific child account (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return \Sendinblue\Client\Model\RemainingCreditModel
     */
    public function addCredits($childId, $addCredits)
    {
        list($response) = $this->addCreditsWithHttpInfo($childId, $addCredits);
        return $response;
    }

    /**
     * Operation addCreditsWithHttpInfo
     *
     * Add Email and/or SMS credits to a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\AddCredits $addCredits Values to post to add credit to a specific child account (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of \Sendinblue\Client\Model\RemainingCreditModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function addCreditsWithHttpInfo($childId, $addCredits)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling addCredits');
        }
        // verify the required parameter 'addCredits' is set
        if ($addCredits === null) {
            throw new \InvalidArgumentException('Missing the required parameter $addCredits when calling addCredits');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}/credits/add";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($addCredits)) {
            $_tempBody = $addCredits;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sendinblue\Client\Model\RemainingCreditModel',
                '/reseller/children/{childId}/credits/add'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sendinblue\Client\Model\RemainingCreditModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\RemainingCreditModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation associateIpToChild
     *
     * Associate a dedicated IP to the child
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\ManageIp $ipId IP&#39;s id (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return void
     */
    public function associateIpToChild($childId, $ipId)
    {
        list($response) = $this->associateIpToChildWithHttpInfo($childId, $ipId);
        return $response;
    }

    /**
     * Operation associateIpToChildWithHttpInfo
     *
     * Associate a dedicated IP to the child
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\ManageIp $ipId IP&#39;s id (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function associateIpToChildWithHttpInfo($childId, $ipId)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling associateIpToChild');
        }
        // verify the required parameter 'ipId' is set
        if ($ipId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ipId when calling associateIpToChild');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}/ips/associate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($ipId)) {
            $_tempBody = $ipId;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reseller/children/{childId}/ips/associate'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createResellerChild
     *
     * Creates a reseller child
     *
     * @param \Sendinblue\Client\Model\CreateChild $resellerChild reseller child to add (optional)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return \Sendinblue\Client\Model\CreateModel
     */
    public function createResellerChild($resellerChild = null)
    {
        list($response) = $this->createResellerChildWithHttpInfo($resellerChild);
        return $response;
    }

    /**
     * Operation createResellerChildWithHttpInfo
     *
     * Creates a reseller child
     *
     * @param \Sendinblue\Client\Model\CreateChild $resellerChild reseller child to add (optional)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of \Sendinblue\Client\Model\CreateModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createResellerChildWithHttpInfo($resellerChild = null)
    {
        // parse inputs
        $resourcePath = "/reseller/children";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // body params
        $_tempBody = null;
        if (isset($resellerChild)) {
            $_tempBody = $resellerChild;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sendinblue\Client\Model\CreateModel',
                '/reseller/children'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sendinblue\Client\Model\CreateModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\CreateModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteResellerChild
     *
     * Deletes a single reseller child based on the childId supplied
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteResellerChild($childId)
    {
        list($response) = $this->deleteResellerChildWithHttpInfo($childId);
        return $response;
    }

    /**
     * Operation deleteResellerChildWithHttpInfo
     *
     * Deletes a single reseller child based on the childId supplied
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteResellerChildWithHttpInfo($childId)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling deleteResellerChild');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reseller/children/{childId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation dissociateIpFromChild
     *
     * Dissociate a dedicated IP to the child
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\ManageIp $ipId IP&#39;s id (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return void
     */
    public function dissociateIpFromChild($childId, $ipId)
    {
        list($response) = $this->dissociateIpFromChildWithHttpInfo($childId, $ipId);
        return $response;
    }

    /**
     * Operation dissociateIpFromChildWithHttpInfo
     *
     * Dissociate a dedicated IP to the child
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\ManageIp $ipId IP&#39;s id (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dissociateIpFromChildWithHttpInfo($childId, $ipId)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling dissociateIpFromChild');
        }
        // verify the required parameter 'ipId' is set
        if ($ipId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ipId when calling dissociateIpFromChild');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}/ips/dissociate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($ipId)) {
            $_tempBody = $ipId;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reseller/children/{childId}/ips/dissociate'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChildInfo
     *
     * Gets the info about a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return \Sendinblue\Client\Model\GetChildInfo
     */
    public function getChildInfo($childId)
    {
        list($response) = $this->getChildInfoWithHttpInfo($childId);
        return $response;
    }

    /**
     * Operation getChildInfoWithHttpInfo
     *
     * Gets the info about a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of \Sendinblue\Client\Model\GetChildInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChildInfoWithHttpInfo($childId)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling getChildInfo');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sendinblue\Client\Model\GetChildInfo',
                '/reseller/children/{childId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sendinblue\Client\Model\GetChildInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\GetChildInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getResellerChilds
     *
     * Gets the list of all reseller's children accounts
     *
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return \Sendinblue\Client\Model\GetChildrenList
     */
    public function getResellerChilds()
    {
        list($response) = $this->getResellerChildsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getResellerChildsWithHttpInfo
     *
     * Gets the list of all reseller's children accounts
     *
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of \Sendinblue\Client\Model\GetChildrenList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getResellerChildsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/reseller/children";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sendinblue\Client\Model\GetChildrenList',
                '/reseller/children'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sendinblue\Client\Model\GetChildrenList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\GetChildrenList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeCredits
     *
     * Remove Email and/or SMS credits from a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\RemoveCredits $removeCredits Values to post to remove email or SMS credits from a specific child account (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return \Sendinblue\Client\Model\RemainingCreditModel
     */
    public function removeCredits($childId, $removeCredits)
    {
        list($response) = $this->removeCreditsWithHttpInfo($childId, $removeCredits);
        return $response;
    }

    /**
     * Operation removeCreditsWithHttpInfo
     *
     * Remove Email and/or SMS credits from a specific child account
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\RemoveCredits $removeCredits Values to post to remove email or SMS credits from a specific child account (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of \Sendinblue\Client\Model\RemainingCreditModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeCreditsWithHttpInfo($childId, $removeCredits)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling removeCredits');
        }
        // verify the required parameter 'removeCredits' is set
        if ($removeCredits === null) {
            throw new \InvalidArgumentException('Missing the required parameter $removeCredits when calling removeCredits');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}/credits/remove";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($removeCredits)) {
            $_tempBody = $removeCredits;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Sendinblue\Client\Model\RemainingCreditModel',
                '/reseller/children/{childId}/credits/remove'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Sendinblue\Client\Model\RemainingCreditModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\RemainingCreditModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateResellerChild
     *
     * Updates infos of reseller's child based on the childId supplied
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\UpdateChild $resellerChild values to update in child profile (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return void
     */
    public function updateResellerChild($childId, $resellerChild)
    {
        list($response) = $this->updateResellerChildWithHttpInfo($childId, $resellerChild);
        return $response;
    }

    /**
     * Operation updateResellerChildWithHttpInfo
     *
     * Updates infos of reseller's child based on the childId supplied
     *
     * @param int $childId id of reseller&#39;s child (required)
     * @param \Sendinblue\Client\Model\UpdateChild $resellerChild values to update in child profile (required)
     * @throws \Sendinblue\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateResellerChildWithHttpInfo($childId, $resellerChild)
    {
        // verify the required parameter 'childId' is set
        if ($childId === null) {
            throw new \InvalidArgumentException('Missing the required parameter $childId when calling updateResellerChild');
        }
        // verify the required parameter 'resellerChild' is set
        if ($resellerChild === null) {
            throw new \InvalidArgumentException('Missing the required parameter $resellerChild when calling updateResellerChild');
        }
        // parse inputs
        $resourcePath = "/reseller/children/{childId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($childId !== null) {
            $resourcePath = str_replace(
                "{" . "childId" . "}",
                $this->apiClient->getSerializer()->toPathValue($childId),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($resellerChild)) {
            $_tempBody = $resellerChild;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('api-key');
        if (strlen($apiKey) !== 0) {
            $headerParams['api-key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/reseller/children/{childId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Sendinblue\Client\Model\ErrorModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}

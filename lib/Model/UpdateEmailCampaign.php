<?php
/**
 * UpdateEmailCampaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * UpdateEmailCampaign Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class UpdateEmailCampaign implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'updateEmailCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tag' => 'string',
        'sender' => '\Swagger\Client\Model\EmailCampaignscampaignIdSender',
        'name' => 'string',
        'html_content' => 'string',
        'html_url' => 'string',
        'scheduled_at' => 'string',
        'subject' => 'string',
        'reply_to' => 'string',
        'to_field' => 'string',
        'recipients' => '\Swagger\Client\Model\EmailCampaignscampaignIdRecipients',
        'attachment_url' => 'string',
        'inline_image_activation' => 'bool',
        'mirror_active' => 'bool',
        'recurring' => 'bool',
        'footer' => 'string',
        'header' => 'string',
        'utm_campaign' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tag' => null,
        'sender' => null,
        'name' => null,
        'html_content' => null,
        'html_url' => 'url',
        'scheduled_at' => null,
        'subject' => null,
        'reply_to' => 'email',
        'to_field' => null,
        'recipients' => null,
        'attachment_url' => 'url',
        'inline_image_activation' => null,
        'mirror_active' => null,
        'recurring' => null,
        'footer' => null,
        'header' => null,
        'utm_campaign' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'tag' => 'tag',
        'sender' => 'sender',
        'name' => 'name',
        'html_content' => 'htmlContent',
        'html_url' => 'htmlUrl',
        'scheduled_at' => 'scheduledAt',
        'subject' => 'subject',
        'reply_to' => 'replyTo',
        'to_field' => 'toField',
        'recipients' => 'recipients',
        'attachment_url' => 'attachmentUrl',
        'inline_image_activation' => 'inlineImageActivation',
        'mirror_active' => 'mirrorActive',
        'recurring' => 'recurring',
        'footer' => 'footer',
        'header' => 'header',
        'utm_campaign' => 'utmCampaign'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'tag' => 'setTag',
        'sender' => 'setSender',
        'name' => 'setName',
        'html_content' => 'setHtmlContent',
        'html_url' => 'setHtmlUrl',
        'scheduled_at' => 'setScheduledAt',
        'subject' => 'setSubject',
        'reply_to' => 'setReplyTo',
        'to_field' => 'setToField',
        'recipients' => 'setRecipients',
        'attachment_url' => 'setAttachmentUrl',
        'inline_image_activation' => 'setInlineImageActivation',
        'mirror_active' => 'setMirrorActive',
        'recurring' => 'setRecurring',
        'footer' => 'setFooter',
        'header' => 'setHeader',
        'utm_campaign' => 'setUtmCampaign'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'tag' => 'getTag',
        'sender' => 'getSender',
        'name' => 'getName',
        'html_content' => 'getHtmlContent',
        'html_url' => 'getHtmlUrl',
        'scheduled_at' => 'getScheduledAt',
        'subject' => 'getSubject',
        'reply_to' => 'getReplyTo',
        'to_field' => 'getToField',
        'recipients' => 'getRecipients',
        'attachment_url' => 'getAttachmentUrl',
        'inline_image_activation' => 'getInlineImageActivation',
        'mirror_active' => 'getMirrorActive',
        'recurring' => 'getRecurring',
        'footer' => 'getFooter',
        'header' => 'getHeader',
        'utm_campaign' => 'getUtmCampaign'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['html_content'] = isset($data['html_content']) ? $data['html_content'] : null;
        $this->container['html_url'] = isset($data['html_url']) ? $data['html_url'] : null;
        $this->container['scheduled_at'] = isset($data['scheduled_at']) ? $data['scheduled_at'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['to_field'] = isset($data['to_field']) ? $data['to_field'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['attachment_url'] = isset($data['attachment_url']) ? $data['attachment_url'] : null;
        $this->container['inline_image_activation'] = isset($data['inline_image_activation']) ? $data['inline_image_activation'] : false;
        $this->container['mirror_active'] = isset($data['mirror_active']) ? $data['mirror_active'] : null;
        $this->container['recurring'] = isset($data['recurring']) ? $data['recurring'] : false;
        $this->container['footer'] = isset($data['footer']) ? $data['footer'] : null;
        $this->container['header'] = isset($data['header']) ? $data['header'] : null;
        $this->container['utm_campaign'] = isset($data['utm_campaign']) ? $data['utm_campaign'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if (!is_null($this->container['scheduled_at']) && !preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['scheduled_at'])) {
            $invalid_properties[] = "invalid value for 'scheduled_at', must be conform to the pattern /YYYY-MM-DD HH:mm:ss/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (!preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['scheduled_at'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Tag of the campaign
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets sender
     * @return \Swagger\Client\Model\EmailCampaignscampaignIdSender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     * @param \Swagger\Client\Model\EmailCampaignscampaignIdSender $sender
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the campaign
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets html_content
     * @return string
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     * @param string $html_content Body of the message (HTML version). REQUIRED if htmlUrl is empty
     * @return $this
     */
    public function setHtmlContent($html_content)
    {
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets html_url
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['html_url'];
    }

    /**
     * Sets html_url
     * @param string $html_url Url which contents the body of the email message. REQUIRED if htmlContent is empty
     * @return $this
     */
    public function setHtmlUrl($html_url)
    {
        $this->container['html_url'] = $html_url;

        return $this;
    }

    /**
     * Gets scheduled_at
     * @return string
     */
    public function getScheduledAt()
    {
        return $this->container['scheduled_at'];
    }

    /**
     * Sets scheduled_at
     * @param string $scheduled_at Date and time on which the campaign has to run
     * @return $this
     */
    public function setScheduledAt($scheduled_at)
    {

        if (!is_null($scheduled_at) && (!preg_match("/YYYY-MM-DD HH:mm:ss/", $scheduled_at))) {
            throw new \InvalidArgumentException("invalid value for $scheduled_at when calling UpdateEmailCampaign., must conform to the pattern /YYYY-MM-DD HH:mm:ss/.");
        }

        $this->container['scheduled_at'] = $scheduled_at;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Subject of the campaign
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     * @param string $reply_to Email on which campaign recipients will be able to reply to
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets to_field
     * @return string
     */
    public function getToField()
    {
        return $this->container['to_field'];
    }

    /**
     * Sets to_field
     * @param string $to_field This is to personalize the «To» Field. If you want to include the first name and last name of your recipient, add [FNAME] [LNAME]. To use the contact attributes here, these must already exist in SendinBlue account
     * @return $this
     */
    public function setToField($to_field)
    {
        $this->container['to_field'] = $to_field;

        return $this;
    }

    /**
     * Gets recipients
     * @return \Swagger\Client\Model\EmailCampaignscampaignIdRecipients
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     * @param \Swagger\Client\Model\EmailCampaignscampaignIdRecipients $recipients
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets attachment_url
     * @return string
     */
    public function getAttachmentUrl()
    {
        return $this->container['attachment_url'];
    }

    /**
     * Sets attachment_url
     * @param string $attachment_url Absolute url of the attachment. Url not allowed from local machine. File must be hosted somewhere.Possilbe extension values are xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff and rtf
     * @return $this
     */
    public function setAttachmentUrl($attachment_url)
    {
        $this->container['attachment_url'] = $attachment_url;

        return $this;
    }

    /**
     * Gets inline_image_activation
     * @return bool
     */
    public function getInlineImageActivation()
    {
        return $this->container['inline_image_activation'];
    }

    /**
     * Sets inline_image_activation
     * @param bool $inline_image_activation Status of inline image. inlineImageActivation = false means image can’t be embedded, & inlineImageActivation = true means image can be embedded, in the email. You cannot send a campaign of more than 4MB with images embedded in the email. Campaigns with the images embedded in the email must be sent to less than 5000 contacts.
     * @return $this
     */
    public function setInlineImageActivation($inline_image_activation)
    {
        $this->container['inline_image_activation'] = $inline_image_activation;

        return $this;
    }

    /**
     * Gets mirror_active
     * @return bool
     */
    public function getMirrorActive()
    {
        return $this->container['mirror_active'];
    }

    /**
     * Sets mirror_active
     * @param bool $mirror_active Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
     * @return $this
     */
    public function setMirrorActive($mirror_active)
    {
        $this->container['mirror_active'] = $mirror_active;

        return $this;
    }

    /**
     * Gets recurring
     * @return bool
     */
    public function getRecurring()
    {
        return $this->container['recurring'];
    }

    /**
     * Sets recurring
     * @param bool $recurring FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
     * @return $this
     */
    public function setRecurring($recurring)
    {
        $this->container['recurring'] = $recurring;

        return $this;
    }

    /**
     * Gets footer
     * @return string
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     * @param string $footer Footer of the email campaign
     * @return $this
     */
    public function setFooter($footer)
    {
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets header
     * @return string
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     * @param string $header Header of the email campaign
     * @return $this
     */
    public function setHeader($header)
    {
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets utm_campaign
     * @return string
     */
    public function getUtmCampaign()
    {
        return $this->container['utm_campaign'];
    }

    /**
     * Sets utm_campaign
     * @param string $utm_campaign Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed
     * @return $this
     */
    public function setUtmCampaign($utm_campaign)
    {
        $this->container['utm_campaign'] = $utm_campaign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



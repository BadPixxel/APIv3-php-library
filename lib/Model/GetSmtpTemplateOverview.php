<?php
/**
 * GetSmtpTemplateOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetSmtpTemplateOverview Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetSmtpTemplateOverview implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getSmtpTemplateOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'subject' => 'string',
        'is_active' => 'bool',
        'test_sent' => 'bool',
        'sender' => '\Swagger\Client\Model\InlineResponse20012Sender',
        'reply_to' => 'string',
        'to_field' => 'string',
        'tag' => 'string',
        'html_content' => 'string',
        'created_at' => 'string',
        'modified_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'subject' => null,
        'is_active' => null,
        'test_sent' => null,
        'sender' => null,
        'reply_to' => 'email',
        'to_field' => null,
        'tag' => null,
        'html_content' => null,
        'created_at' => null,
        'modified_at' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'subject' => 'subject',
        'is_active' => 'isActive',
        'test_sent' => 'testSent',
        'sender' => 'sender',
        'reply_to' => 'replyTo',
        'to_field' => 'toField',
        'tag' => 'tag',
        'html_content' => 'htmlContent',
        'created_at' => 'createdAt',
        'modified_at' => 'modifiedAt'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'subject' => 'setSubject',
        'is_active' => 'setIsActive',
        'test_sent' => 'setTestSent',
        'sender' => 'setSender',
        'reply_to' => 'setReplyTo',
        'to_field' => 'setToField',
        'tag' => 'setTag',
        'html_content' => 'setHtmlContent',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'subject' => 'getSubject',
        'is_active' => 'getIsActive',
        'test_sent' => 'getTestSent',
        'sender' => 'getSender',
        'reply_to' => 'getReplyTo',
        'to_field' => 'getToField',
        'tag' => 'getTag',
        'html_content' => 'getHtmlContent',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['test_sent'] = isset($data['test_sent']) ? $data['test_sent'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['to_field'] = isset($data['to_field']) ? $data['to_field'] : null;
        $this->container['tag'] = isset($data['tag']) ? $data['tag'] : null;
        $this->container['html_content'] = isset($data['html_content']) ? $data['html_content'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['modified_at'] = isset($data['modified_at']) ? $data['modified_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalid_properties[] = "'subject' can't be null";
        }
        if ($this->container['is_active'] === null) {
            $invalid_properties[] = "'is_active' can't be null";
        }
        if ($this->container['test_sent'] === null) {
            $invalid_properties[] = "'test_sent' can't be null";
        }
        if ($this->container['reply_to'] === null) {
            $invalid_properties[] = "'reply_to' can't be null";
        }
        if ($this->container['to_field'] === null) {
            $invalid_properties[] = "'to_field' can't be null";
        }
        if ($this->container['tag'] === null) {
            $invalid_properties[] = "'tag' can't be null";
        }
        if ($this->container['html_content'] === null) {
            $invalid_properties[] = "'html_content' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if (!preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['created_at'])) {
            $invalid_properties[] = "invalid value for 'created_at', must be conform to the pattern /YYYY-MM-DD HH:mm:ss/.";
        }

        if ($this->container['modified_at'] === null) {
            $invalid_properties[] = "'modified_at' can't be null";
        }
        if (!preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['modified_at'])) {
            $invalid_properties[] = "invalid value for 'modified_at', must be conform to the pattern /YYYY-MM-DD HH:mm:ss/.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['subject'] === null) {
            return false;
        }
        if ($this->container['is_active'] === null) {
            return false;
        }
        if ($this->container['test_sent'] === null) {
            return false;
        }
        if ($this->container['reply_to'] === null) {
            return false;
        }
        if ($this->container['to_field'] === null) {
            return false;
        }
        if ($this->container['tag'] === null) {
            return false;
        }
        if ($this->container['html_content'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if (!preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['created_at'])) {
            return false;
        }
        if ($this->container['modified_at'] === null) {
            return false;
        }
        if (!preg_match("/YYYY-MM-DD HH:mm:ss/", $this->container['modified_at'])) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id ID of the template
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Name of the template
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Subject of the template
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets is_active
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     * @param bool $is_active Status of template (true=active, false=inactive)
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets test_sent
     * @return bool
     */
    public function getTestSent()
    {
        return $this->container['test_sent'];
    }

    /**
     * Sets test_sent
     * @param bool $test_sent Status of test sending for the template (true=test email has been sent, false=test email has not been sent)
     * @return $this
     */
    public function setTestSent($test_sent)
    {
        $this->container['test_sent'] = $test_sent;

        return $this;
    }

    /**
     * Gets sender
     * @return \Swagger\Client\Model\InlineResponse20012Sender
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     * @param \Swagger\Client\Model\InlineResponse20012Sender $sender
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets reply_to
     * @return string
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     * @param string $reply_to Email defined as the \"Reply to\" for the template
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets to_field
     * @return string
     */
    public function getToField()
    {
        return $this->container['to_field'];
    }

    /**
     * Sets to_field
     * @param string $to_field Customisation of the \"to\" field for the template
     * @return $this
     */
    public function setToField($to_field)
    {
        $this->container['to_field'] = $to_field;

        return $this;
    }

    /**
     * Gets tag
     * @return string
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     * @param string $tag Tag of the template
     * @return $this
     */
    public function setTag($tag)
    {
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets html_content
     * @return string
     */
    public function getHtmlContent()
    {
        return $this->container['html_content'];
    }

    /**
     * Sets html_content
     * @param string $html_content HTML content of the template
     * @return $this
     */
    public function setHtmlContent($html_content)
    {
        $this->container['html_content'] = $html_content;

        return $this;
    }

    /**
     * Gets created_at
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param string $created_at Creation date of the template
     * @return $this
     */
    public function setCreatedAt($created_at)
    {

        if ((!preg_match("/YYYY-MM-DD HH:mm:ss/", $created_at))) {
            throw new \InvalidArgumentException("invalid value for $created_at when calling GetSmtpTemplateOverview., must conform to the pattern /YYYY-MM-DD HH:mm:ss/.");
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     * @return string
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     * @param string $modified_at Last modification date of the template
     * @return $this
     */
    public function setModifiedAt($modified_at)
    {

        if ((!preg_match("/YYYY-MM-DD HH:mm:ss/", $modified_at))) {
            throw new \InvalidArgumentException("invalid value for $modified_at when calling GetSmtpTemplateOverview., must conform to the pattern /YYYY-MM-DD HH:mm:ss/.");
        }

        $this->container['modified_at'] = $modified_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



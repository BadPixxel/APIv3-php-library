<?php
/**
 * GetAccountPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sendinblue\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sendinblue\Client\Model;

use \ArrayAccess;

/**
 * GetAccountPlan Class Doc Comment
 *
 * @category    Class
 * @package     Sendinblue\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetAccountPlan implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getAccount_plan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'creditsType' => 'string',
        'credits' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'creditsType' => null,
        'credits' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'creditsType' => 'creditsType',
        'credits' => 'credits'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'creditsType' => 'setCreditsType',
        'credits' => 'setCredits'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'creditsType' => 'getCreditsType',
        'credits' => 'getCredits'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_PAY_AS_YOU_GO = 'payAsYouGo';
    const TYPE_UNLIMITED = 'unlimited';
    const TYPE_FREE = 'free';
    const TYPE_SUBSCRIPTION = 'subscription';
    const TYPE_SMS = 'sms';
    const TYPE_RESELLER = 'reseller';
    const CREDITS_TYPE_USER_LIMIT = 'userLimit';
    const CREDITS_TYPE_SEND_LIMIT = 'sendLimit';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PAY_AS_YOU_GO,
            self::TYPE_UNLIMITED,
            self::TYPE_FREE,
            self::TYPE_SUBSCRIPTION,
            self::TYPE_SMS,
            self::TYPE_RESELLER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCreditsTypeAllowableValues()
    {
        return [
            self::CREDITS_TYPE_USER_LIMIT,
            self::CREDITS_TYPE_SEND_LIMIT,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['creditsType'] = isset($data['creditsType']) ? $data['creditsType'] : null;
        $this->container['credits'] = isset($data['credits']) ? $data['credits'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['creditsType'] === null) {
            $invalid_properties[] = "'creditsType' can't be null";
        }
        $allowed_values = $this->getCreditsTypeAllowableValues();
        if (!in_array($this->container['creditsType'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'creditsType', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        if ($this->container['credits'] === null) {
            $invalid_properties[] = "'credits' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        if ($this->container['creditsType'] === null) {
            return false;
        }
        $allowed_values = $this->getCreditsTypeAllowableValues();
        if (!in_array($this->container['creditsType'], $allowed_values)) {
            return false;
        }
        if ($this->container['credits'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Displays the plan type of the user
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets creditsType
     * @return string
     */
    public function getCreditsType()
    {
        return $this->container['creditsType'];
    }

    /**
     * Sets creditsType
     * @param string $creditsType This is the type of the credit, \"User Limit\" or \"Send Limit\" are two possible types of credit of a user. \"User Limit\" implies the total number of subscribers you can add to your account, and \"Send Limit\" implies the total number of emails you can send to the subscribers in your account.
     * @return $this
     */
    public function setCreditsType($creditsType)
    {
        $allowed_values = $this->getCreditsTypeAllowableValues();
        if (!in_array($creditsType, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'creditsType', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['creditsType'] = $creditsType;

        return $this;
    }

    /**
     * Gets credits
     * @return int
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     * @param int $credits Remaining credits of the user. This can either be \"User Limit\" or \"Send Limit\" depending on the plan.
     * @return $this
     */
    public function setCredits($credits)
    {
        $this->container['credits'] = $credits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Sendinblue\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Sendinblue\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}



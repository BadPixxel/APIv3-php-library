<?php
/**
 * GetContactCampaignStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |
 *
 * OpenAPI spec version: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * GetContactCampaignStats Class Doc Comment
 *
 * @category    Class
 * @description Campaign Statistics for the contact
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class GetContactCampaignStats implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'getContactCampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'messages_sent' => '\Swagger\Client\Model\InlineResponse20015MessagesSent[]',
        'hard_bounces' => '\Swagger\Client\Model\InlineResponse20015MessagesSent[]',
        'soft_bounces' => '\Swagger\Client\Model\InlineResponse20015MessagesSent[]',
        'complaints' => '\Swagger\Client\Model\InlineResponse20015MessagesSent[]',
        'unsubscriptions' => '\Swagger\Client\Model\InlineResponse20015Unsubscriptions',
        'opened' => '\Swagger\Client\Model\InlineResponse20015Opened[]',
        'clicked' => '\Swagger\Client\Model\InlineResponse20015Clicked[]',
        'transac_attributes' => '\Swagger\Client\Model\InlineResponse20015TransacAttributes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'messages_sent' => null,
        'hard_bounces' => null,
        'soft_bounces' => null,
        'complaints' => null,
        'unsubscriptions' => null,
        'opened' => null,
        'clicked' => null,
        'transac_attributes' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'messages_sent' => 'messagesSent',
        'hard_bounces' => 'hardBounces',
        'soft_bounces' => 'softBounces',
        'complaints' => 'complaints',
        'unsubscriptions' => 'unsubscriptions',
        'opened' => 'opened',
        'clicked' => 'clicked',
        'transac_attributes' => 'transacAttributes'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'messages_sent' => 'setMessagesSent',
        'hard_bounces' => 'setHardBounces',
        'soft_bounces' => 'setSoftBounces',
        'complaints' => 'setComplaints',
        'unsubscriptions' => 'setUnsubscriptions',
        'opened' => 'setOpened',
        'clicked' => 'setClicked',
        'transac_attributes' => 'setTransacAttributes'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'messages_sent' => 'getMessagesSent',
        'hard_bounces' => 'getHardBounces',
        'soft_bounces' => 'getSoftBounces',
        'complaints' => 'getComplaints',
        'unsubscriptions' => 'getUnsubscriptions',
        'opened' => 'getOpened',
        'clicked' => 'getClicked',
        'transac_attributes' => 'getTransacAttributes'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['messages_sent'] = isset($data['messages_sent']) ? $data['messages_sent'] : null;
        $this->container['hard_bounces'] = isset($data['hard_bounces']) ? $data['hard_bounces'] : null;
        $this->container['soft_bounces'] = isset($data['soft_bounces']) ? $data['soft_bounces'] : null;
        $this->container['complaints'] = isset($data['complaints']) ? $data['complaints'] : null;
        $this->container['unsubscriptions'] = isset($data['unsubscriptions']) ? $data['unsubscriptions'] : null;
        $this->container['opened'] = isset($data['opened']) ? $data['opened'] : null;
        $this->container['clicked'] = isset($data['clicked']) ? $data['clicked'] : null;
        $this->container['transac_attributes'] = isset($data['transac_attributes']) ? $data['transac_attributes'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets messages_sent
     * @return \Swagger\Client\Model\InlineResponse20015MessagesSent[]
     */
    public function getMessagesSent()
    {
        return $this->container['messages_sent'];
    }

    /**
     * Sets messages_sent
     * @param \Swagger\Client\Model\InlineResponse20015MessagesSent[] $messages_sent
     * @return $this
     */
    public function setMessagesSent($messages_sent)
    {
        $this->container['messages_sent'] = $messages_sent;

        return $this;
    }

    /**
     * Gets hard_bounces
     * @return \Swagger\Client\Model\InlineResponse20015MessagesSent[]
     */
    public function getHardBounces()
    {
        return $this->container['hard_bounces'];
    }

    /**
     * Sets hard_bounces
     * @param \Swagger\Client\Model\InlineResponse20015MessagesSent[] $hard_bounces
     * @return $this
     */
    public function setHardBounces($hard_bounces)
    {
        $this->container['hard_bounces'] = $hard_bounces;

        return $this;
    }

    /**
     * Gets soft_bounces
     * @return \Swagger\Client\Model\InlineResponse20015MessagesSent[]
     */
    public function getSoftBounces()
    {
        return $this->container['soft_bounces'];
    }

    /**
     * Sets soft_bounces
     * @param \Swagger\Client\Model\InlineResponse20015MessagesSent[] $soft_bounces
     * @return $this
     */
    public function setSoftBounces($soft_bounces)
    {
        $this->container['soft_bounces'] = $soft_bounces;

        return $this;
    }

    /**
     * Gets complaints
     * @return \Swagger\Client\Model\InlineResponse20015MessagesSent[]
     */
    public function getComplaints()
    {
        return $this->container['complaints'];
    }

    /**
     * Sets complaints
     * @param \Swagger\Client\Model\InlineResponse20015MessagesSent[] $complaints
     * @return $this
     */
    public function setComplaints($complaints)
    {
        $this->container['complaints'] = $complaints;

        return $this;
    }

    /**
     * Gets unsubscriptions
     * @return \Swagger\Client\Model\InlineResponse20015Unsubscriptions
     */
    public function getUnsubscriptions()
    {
        return $this->container['unsubscriptions'];
    }

    /**
     * Sets unsubscriptions
     * @param \Swagger\Client\Model\InlineResponse20015Unsubscriptions $unsubscriptions
     * @return $this
     */
    public function setUnsubscriptions($unsubscriptions)
    {
        $this->container['unsubscriptions'] = $unsubscriptions;

        return $this;
    }

    /**
     * Gets opened
     * @return \Swagger\Client\Model\InlineResponse20015Opened[]
     */
    public function getOpened()
    {
        return $this->container['opened'];
    }

    /**
     * Sets opened
     * @param \Swagger\Client\Model\InlineResponse20015Opened[] $opened
     * @return $this
     */
    public function setOpened($opened)
    {
        $this->container['opened'] = $opened;

        return $this;
    }

    /**
     * Gets clicked
     * @return \Swagger\Client\Model\InlineResponse20015Clicked[]
     */
    public function getClicked()
    {
        return $this->container['clicked'];
    }

    /**
     * Sets clicked
     * @param \Swagger\Client\Model\InlineResponse20015Clicked[] $clicked
     * @return $this
     */
    public function setClicked($clicked)
    {
        $this->container['clicked'] = $clicked;

        return $this;
    }

    /**
     * Gets transac_attributes
     * @return \Swagger\Client\Model\InlineResponse20015TransacAttributes[]
     */
    public function getTransacAttributes()
    {
        return $this->container['transac_attributes'];
    }

    /**
     * Sets transac_attributes
     * @param \Swagger\Client\Model\InlineResponse20015TransacAttributes[] $transac_attributes
     * @return $this
     */
    public function setTransacAttributes($transac_attributes)
    {
        $this->container['transac_attributes'] = $transac_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


